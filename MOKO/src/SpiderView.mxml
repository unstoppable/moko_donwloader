<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="vgroup1_creationCompleteHandler(event)"
		  width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">

	<fx:Script>
		<![CDATA[
			import com.raisedtech.queueprocess.QueueProcessor;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;



			private static var CATEGORY:RegExp=/title="(.+)" href="(\/post\/\w+\/category\/\d+\/1\.html)"/ig;
			private static var ALBUM:RegExp=/title="(.+)" href="(\/post\/\d+\.html)"/ig;
			private static var ALBUM1:RegExp=/href="(\/post\/\d+\.html)" title="([^\n\r"]+)"/ig;
			private static var PHOTO:RegExp=/src2="(.+\.jpg)"/ig;
			private static var NAME:RegExp=/<title>(.*)'s/i;
			private static var IMGUSERLOGO:RegExp=/<img id="imgUserLogo".*src="([^"]+)"/i;
			private static var vardd:*;
			[Bindable]
			private var loading:Boolean=false;
			[Bindable]
			private var user:String="aishangzhen";
			[Bindable]
			private var info:String="";
			private var _progress:Number=0;
			[Bindable]
			private var categorys:ArrayCollection=new ArrayCollection();
			private var queueReadAlbums:QueueProcessor=new QueueProcessor();
			private var queueDownloadPhotos:QueueProcessor=new QueueProcessor();
			[Bindable]
			private var albums:ArrayCollection=new ArrayCollection();
			private var queueReadPhotos:QueueProcessor=new QueueProcessor();
			[Bindable]
			private var photos:ArrayCollection=new ArrayCollection();

			[Bindable]
			public function get progress():Number
			{
				return _progress;
			}

			public function set progress(value:Number):void
			{
				if(value<=0 || isNaN(value)){
					value=0.01;
				}
				_progress = value;
			}

			protected function onProgress(event:ProgressEvent):void
			{
				progress=event.bytesLoaded / event.bytesTotal;
			}

			//////////////////////////////////////////////////////////////////////////////////////////////
			protected function start(event:MouseEvent):void
			{
				if(loading){
					loading=false;
					queueReadAlbums.stop();
					queueDownloadPhotos.stop();
					queueReadPhotos.stop();
					info="已停止";
					return;
				}
				loading=true;
				//http://www.moko.cc/post/aishangzhen/list.html
				var url:String="http://www.moko.cc/post/" + user + "/list.html";
				ImageSaver.user=user;
				var so:SharedObject=SharedObject.getLocal("user");
				so.data.user=user;
				so.flush();
				so.close();

				trace('load url:' + url);
				info="正在读取" + url;
				var loader:HttpLoader=new HttpLoader();
				loader.addEventListener(Event.COMPLETE, onReadCategorysComplete);
				loader.addEventListener(IOErrorEvent.IO_ERROR, onReadCategorysComplete);
				loader.addEventListener(ProgressEvent.PROGRESS, onProgress);
				loader.load(new URLRequest(url));
			}

			protected function onReadCategorysComplete(event:Event):void
			{
				if(!loading) return;
				vs.selectedIndex=0;
				var loader:HttpLoader=HttpLoader(event.target);
				loader.removeEventListener(Event.COMPLETE, onReadCategorysComplete);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, onReadCategorysComplete);
				loader.removeEventListener(ProgressEvent.PROGRESS, onProgress);
				if (event.type == Event.COMPLETE)
				{
					categorys.removeAll();
					var source:String=loader.data;
					var tempName:Array=NAME.exec(source);
					if(tempName){
						var tempLogo:Array=IMGUSERLOGO.exec(source);
						var logo:String = "";
						if(tempLogo){
							logo =tempLogo[1];
						}
						Model.save(tempName[1],"http://www.moko.cc/post/" + user + "/list.html",logo);
					}
					
					var temp:Array=CATEGORY.exec(source);
					var arr:Array=[];
					while (temp != null)
					{
						if (-1 == arr.indexOf(temp[2]))
						{
							arr.push(temp[2]);
							var vo:UrlVO=new UrlVO();
							vo.name=temp[1];
							vo.url="http://www.moko.cc" + temp[2];
							categorys.addItem(vo);
						}
						temp=CATEGORY.exec(source);
					}
					;
					info=("一共有类别" + arr.length + "个");
					if (arr.length)
					{
						setTimeout(doReadAlbums, 500, categorys.source);
					}
				}
				else
				{
					info=event.toString();
				}
			}

			//////////////////////////////////////////////////////////////////////////////////////////////

			private function doReadAlbums(categorys:Array):void
			{
				if(!loading) return;
				progress=0;
				queueReadAlbums.stop();
				queueReadAlbums.removeEventListener(Event.COMPLETE, queueReadAlbumsComplete);
				queueReadAlbums.removeEventListener(ProgressEvent.PROGRESS, onProgress);
				queueReadAlbums=new QueueProcessor();
				queueReadAlbums.addEventListener(Event.COMPLETE, queueReadAlbumsComplete);
				queueReadAlbums.addEventListener(ProgressEvent.PROGRESS, onProgress);
				for each (var i:UrlVO in categorys)
				{
					queueReadAlbums.addTask(new UrlVOTask(i));
				}
				queueReadAlbums.execute();
			}

			protected function queueReadAlbumsComplete(event:Event):void
			{
				if(!loading) return;
				vs.selectedIndex=1;
				var data:String='';
				for each (var i:UrlVO in categorys.source)
				{
					data+=i.data;
				}
				albums.removeAll();
				albums.disableAutoUpdate();

				var arr:Array=matchAlbums(data);
				if (arr.length == 0)
				{
					arr=matchAlbums1(data);
				}
				info=("一共有专辑" + arr.length + "个");
				if (arr.length)
				{
					setTimeout(doReadPhotos, 500, albums.source);
				}
				albums.refresh();
			}

			private function matchAlbums(data:String):Array
			{
				var temp:Array=ALBUM.exec(data);
				var arr:Array=[];
				while (temp != null)
				{
					if (-1 == arr.indexOf(temp[2]))
					{
						arr.push(temp[2]);
						var vo:UrlVO=new UrlVO(); 
						vo.name =temp[1].replace(/\\\/:\*\?"<>\|/g,'');
						vo.url="http://www.moko.cc" + temp[2];
						albums.addItem(vo);
					}
					temp=ALBUM.exec(data);
				}
				;
				return arr;
			}

			private function matchAlbums1(data:String):Array
			{
				var temp:Array=ALBUM1.exec(data);
				var arr:Array=[];
				while (temp != null)
				{
					if (-1 == arr.indexOf(temp[1]))
					{
						arr.push(temp[1]);
						var vo:UrlVO=new UrlVO();
						vo.name=temp[2].replace(/\\\/:\*\?"<>\|/g,'');
						vo.url="http://www.moko.cc" + temp[1];
						albums.addItem(vo);
					}
					temp=ALBUM1.exec(data);
				}
				;
				return arr;
			}

			//////////////////////////////////////////////////////////////////////////////////////////////

			private function doReadPhotos(categorys:Array):void
			{
				if(!loading) return;
				progress=0;
				queueReadPhotos.stop();
				queueReadPhotos.removeEventListener(Event.COMPLETE, queueReadPhotosComplete);
				queueReadPhotos.removeEventListener(ProgressEvent.PROGRESS, onProgress);
				queueReadPhotos=new QueueProcessor();
				queueReadPhotos.addEventListener(Event.COMPLETE, queueReadPhotosComplete);
				queueReadPhotos.addEventListener(ProgressEvent.PROGRESS, onProgress);
				for each (var i:UrlVO in categorys)
				{
					queueReadPhotos.addTask(new UrlVOTask(i));
				}
				queueReadPhotos.execute();
			}

			protected function queueReadPhotosComplete(event:Event):void
			{
				if(!loading) return;
				vs.selectedIndex=2;
				photos.removeAll();
				photos.disableAutoUpdate();
				for each (var i:UrlVO in albums.source)
				{
					var temp:Array=PHOTO.exec(i.data);
					var arr:Array=[];
					while (temp != null)
					{
						var u:String=temp[1];
						if (-1 == arr.indexOf(u))
						{
							arr.push(u);
							var vo:UrlVO=new UrlVO();
							vo.url=u;
							vo.name=i.name + '_' + arr.length + ".jpg";
							photos.addItem(vo);
						}
						temp=PHOTO.exec(i.data);
					}
					;
				}
				info=("一共有照片" + arr.length + "个");
				if (arr.length)
				{
					setTimeout(doDownloadPhotos, 1000, photos.source);
				}
				photos.refresh();
			}

			//////////////////////////////////////////////////////////////////////////////////////////////
			private function doDownloadPhotos(photos:Array):void
			{
				if(!loading) return;
				info=("正在下载照片" + photos.length + ", 照片正在保存到桌面");
				progress=0;
				queueDownloadPhotos.stop();
				queueDownloadPhotos.removeEventListener(Event.COMPLETE, queueDownloadPhotosComplete);
				queueDownloadPhotos.removeEventListener(ProgressEvent.PROGRESS, onProgress);
				queueDownloadPhotos=new QueueProcessor();
				queueDownloadPhotos.addEventListener(Event.COMPLETE, queueDownloadPhotosComplete);
				queueDownloadPhotos.addEventListener(ProgressEvent.PROGRESS, onProgress);
				for each (var i:UrlVO in photos)
				{
					queueDownloadPhotos.addTask(new PhotoDownloadTask(i));
				}
				queueDownloadPhotos.execute();

			}

			protected function queueDownloadPhotosComplete(event:Event):void
			{
				if(!loading) return;
				info=("下载照片完成");
				loading=false;
				Alert.show("下载照片完成! 照片已保存到桌面！");
			}

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				var so:SharedObject=SharedObject.getLocal("user");
				if (so.data.user)
				{
					user=so.data.user;
				}
				so.close();
			}

			protected function help(event:MouseEvent):void
			{
				this.dispatchEvent(new Event(Event.CANCEL));

			}
			
			protected function list1_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function onselect(event:MouseEvent):void
			{
				var p:DisplayObject = DisplayObject(event.target);
				while(p){
					if(p is GirlItemRenderer){
						break;
					}
					p = p.parent;
				}
				if(p){
					var data:* = GirlItemRenderer(p).data;
					user = data.url.replace('http:\/\/www.moko.cc\/post\/','').replace('\/list.html','');
					start(null);
				}
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="cancel", type="flash.events.Event")]
	</fx:Metadata>
	<s:List dataProvider="{Model.getModel().list}" width="300" height="100%" doubleClickEnabled="true" doubleClick="onselect(event)" change="list1_changeHandler(event)" itemRenderer="GirlItemRenderer">
	</s:List>
	<s:VGroup id="view" width="100%" height="100%">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="用户主页地址:"/>
			<s:HGroup gap="0">
				<s:TextInput editable="false" text="http://www.moko.cc/" borderVisible="false"/>
				<s:TextInput width="150" text="@{user}" restrict="^ :/"/>
				<s:TextInput editable="false" text="/" borderVisible="false" width="20"/>
			</s:HGroup>
			<s:Button label="{loading?'停止':'开始'}" click="start(event)"/>
			<s:Label color="#AB4747" text="{info}"/>
		</s:HGroup>
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke weight="1" color="0xeeeeee"/>
			</s:stroke>
		</s:Line>
		<s:HGroup width="100%">
			<s:ButtonBar dataProvider="{vs}"/>
			<s:Spacer width="100%" />
			<s:Button label="帮助" click="help(event)"/>
		</s:HGroup>
		<s:Group width="100%">
			<s:Line id="sample" width="100%">
				<s:stroke>
					<s:SolidColorStroke weight="1" color="0xeeeeee"/>
				</s:stroke>
			</s:Line>
			<s:Line width="{progress*sample.width}">
				<s:stroke>
					<s:SolidColorStroke weight="2" color="0x339933"/>
				</s:stroke>
			</s:Line>
		</s:Group>

		<mx:ViewStack id="vs" width="100%" height="100%">
			<s:NavigatorContent width="100%" height="100%" label="展示列表">
				<s:List dataProvider="{categorys}" width="100%" height="100%" itemRenderer="CategoryItemRenderer"/>
			</s:NavigatorContent>
			<s:NavigatorContent width="100%" height="100%" label="专辑列表">
				<s:List dataProvider="{albums}" width="100%" height="100%" itemRenderer="CategoryItemRenderer"/>
			</s:NavigatorContent>
			<s:NavigatorContent width="100%" height="100%" label="照片列表">
				<s:List dataProvider="{photos}" width="100%" height="100%" itemRenderer="CategoryItemRenderer"/>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
</s:HGroup>
